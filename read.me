#  Solana Token Launch with DBC to DAMM V2 Migration

This project demonstrates a full pipeline for launching a token using a **Dynamic Bonding Curve (DBC)** mechanism on the Solana Devnet and simulates migration to a **DAMM V2 pool** once a SOL reserve threshold is met.

---

## Features

-  Launch a 10 Billion SPL token with 9 decimals
-  Implement buy/sell logic using bonding curve simulation
-  Fee split support (platform + creator fees)
-  Reserve threshold-based migration to DAMM V2 (simulated)
-  Run with simple TypeScript scripts using `ts-node`

---

## Project Structure

```bash
dbc_damm/
├── Anchor.toml                # Anchor config (optional for Rust side)
├── Cargo.toml                 # Rust crate config (optional)
├── ts/                        # TypeScript client scripts
│   ├── create.ts              # Creates mint, vault, and initializes .env
│   ├── buy.ts                 # Buyer buys tokens from the DBC pool
│   ├── sell.ts                # Buyer sells tokens back to the DBC pool
│   ├── migrate.ts             # Triggers simulated migration if SOL reserve > threshold
│   ├── .env                   # Environment variables
│   ├── wallet_creator.json    # Creator wallet (auto-generated)
│   └── wallet_buyer.json      # Buyer wallet (auto-generated)
├── node_modules/
├── package.json
└── README.md


##  Tech Stack

- [Solana](https://solana.com)
- [Anchor](https://www.anchor-lang.com)
- [TypeScript](https://www.typescriptlang.org/)
- [@solana/web3.js](https://solana-labs.github.io/solana-web3.js/)
- [@solana/spl-token](https://spl.solana.com/token)
- Meteora SDK (optional for advanced liquidity features)

